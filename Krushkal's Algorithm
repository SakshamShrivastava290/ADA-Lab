#include <stdio.h>

int find(int v, int parent[]) {
    while (parent[v] != v)
        v = parent[v];
    return v;
}

void unionSets(int i, int j, int parent[]) {
    parent[j] = i;
}

void kruskal(int n, int graph[10][10]) {
    int parent[10], i, j, u, v, min, count = 0, cost = 0;

    // Initialize parent array
    for (i = 0; i < n; i++)
        parent[i] = i;

    printf("Edges in the Minimum Spanning Tree:\n");

    while (count < n - 1) {
        min = 9999;
        // Find the minimum edge
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (graph[i][j] != 0 && graph[i][j] < min) {
                    min = graph[i][j];
                    u = i;
                    v = j;
                }
            }
        }

        int set_u = find(u, parent);
        int set_v = find(v, parent);

        // If it doesn't form a cycle
        if (set_u != set_v) {
            printf("%d - %d = %d\n", u, v, min);
            cost += min;
            unionSets(set_u, set_v, parent);
            count++;
        }

        // Mark edge as used
        graph[u][v] = graph[v][u] = 9999;
    }

    printf("Total cost of MST = %d\n", cost);
}

int main() {
    int n, i, j, graph[10][10];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (0 if no edge):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    kruskal(n, graph);
    return 0;
}
