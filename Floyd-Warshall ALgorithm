#include <stdio.h>
#define INF 99999

void floydWarshall(int graph[][4], int V) {
    int dist[V][V];

    // Initialize distance matrix
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            dist[i][j] = (graph[i][j] == 0 && i != j) ? INF : graph[i][j];

    // Core Floyd-Warshall logic
    for (int k = 0; k < V; k++)
        for (int i = 0; i < V; i++)
            for (int j = 0; j < V; j++)
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];

    // Print result
    printf("Shortest distances between every pair of vertices:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++)
            printf((dist[i][j] == INF) ? "INF " : "%3d ", dist[i][j]);
        printf("\n");
    }
}

int main() {
    int graph[4][4] = {
        {0, 3, INF, 7},
        {8, 0, 2, INF},
        {5, INF, 0, 1},
        {2, INF, INF, 0}
    };

    floydWarshall(graph, 4);
    return 0;
}
