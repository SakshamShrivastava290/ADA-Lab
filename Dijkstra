#include <stdio.h>
#define INF 9999
#define MAX 10

void dijkstra(int n, int cost[MAX][MAX], int src) {
    int dist[MAX], visited[MAX] = {0}, i, j, u, min;

    // Initialize distances
    for (i = 0; i < n; i++)
        dist[i] = cost[src][i];
    visited[src] = 1;

    for (i = 1; i < n; i++) {
        min = INF;
        for (j = 0; j < n; j++) {
            if (!visited[j] && dist[j] < min) {
                min = dist[j];
                u = j;
            }
        }

        visited[u] = 1;

        for (j = 0; j < n; j++) {
            if (!visited[j] && dist[u] + cost[u][j] < dist[j]) {
                dist[j] = dist[u] + cost[u][j];
            }
        }
    }

    printf("\nShortest paths from vertex %d:\n", src);
    for (i = 0; i < n; i++)
        printf("%d -> %d = %d\n", src, i, dist[i]);
}

int main() {
    int n, cost[MAX][MAX], i, j, src;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix (use %d for INF/no path):\n", INF);
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    printf("Enter the source vertex (0 to %d): ", n - 1);
    scanf("%d", &src);

    dijkstra(n, cost, src);
    return 0;
}
