#include <stdio.h>

#define MAX 100

int adj[MAX][MAX];   // adjacency matrix
int visited[MAX];    // visited array
int stack[MAX];      // stack to store topological order
int top = -1;        // stack top pointer
int n;               // number of vertices

void push(int v) {
    stack[++top] = v;
}

int pop() {
    if (top == -1) {
        return -1; // stack empty
    }
    return stack[top--];
}

void dfs(int v) {
    visited[v] = 1;

    for (int i = 0; i < n; i++) {
        if (adj[v][i] == 1 && !visited[i]) {
            dfs(i);
        }
    }

    push(v);
}

void topologicalSort() {
    // Initialize visited array
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    // Run DFS for all unvisited vertices
    for (int i = 0; i < n; i++) {
        if (!visited[i])
            dfs(i);
    }

    printf("Topological Order: ");
    int v;
    while ((v = pop()) != -1) {
        printf("%d ", v);
    }
    printf("\n");
}

int main() {
    int e;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    // Initialize adjacency matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            adj[i][j] = 0;
    }

    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter edges (from to):\n");
    for (int i = 0; i < e; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
    }

    topologicalSort();

    return 0;
}
