#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to swap two integers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function used in Quick Sort
int partition(int arr[], int low, int high) {
    int pivot = arr[high];   // Choosing the last element as pivot
    int i = low - 1;         // Index of smaller element

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]); // Move smaller element to left
        }
    }
    swap(&arr[i + 1], &arr[high]);  // Place pivot at correct position
    return i + 1;  // Return the partitioning index
}

// Recursive Quick Sort function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); // Get partition index
        quickSort(arr, low, pi - 1);  // Sort elements before partition
        quickSort(arr, pi + 1, high); // Sort elements after partition
    }
}

// Print array elements
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Main function
int main() {
    int n;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Seed random number generator
    srand(time(0));

    // Generate random elements
    printf("\nUnsorted array:\n");
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Measure start time
    clock_t start = clock();

    // Perform quick sort
    quickSort(arr, 0, n - 1);

    // Measure end time
    clock_t end = clock();

    // Display sorted array
    printf("\nSorted array:\n");
    printArray(arr, n);

    // Calculate time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTime taken to sort: %f seconds\n", time_taken);

    return 0;
}
